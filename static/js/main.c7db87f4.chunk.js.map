{"version":3,"sources":["assets/logo.png","components/AppNavbar/AppNavbar.js","components/ErrorMessage/ErrorMessage.js","components/LoadingSpinner/LoadingSpinner.js","components/SearchForm/SearchForm.js","components/CharacterCard/CharacterCard.js","components/CharacterListPagination/CharacterListPagination.js","views/CharacterList/CharacterList.js","components/CharacterJumbotron/CharacterJumbotron.js","views/Character/Character.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppNavbar","Navbar","bg","variant","expand","className","Brand","as","Link","to","src","logo","alt","height","Toggle","aria-controls","Collapse","id","Nav","href","React","Component","ErrorMessage","this","props","error","message","LoadingSpinner","SearchForm","state","searchQuery","event","setState","target","value","searchChanged","FormControl","type","placeholder","onChange","onSearchChanged","Button","onClick","CharacterCard","character","Card","Img","image","ImgOverlay","pathname","Title","name","CharacterListPagination","firstProps","active","disabled","lastProps","ellipsisFirstDisplay","ellipsisLastDisplay","nextPage","prevPage","currentElements","page","paginationClicked","currentPage","pages","first","last","elements","push","Pagination","Item","key","length","onPaginationClick","elementProps","setElementProps","setCurrentElements","First","Prev","Ellipsis","Next","Last","API_URL","CharacterList","characters","filteredCharacters","isLoaded","handleSearchChanged","bind","handlePaginationClicked","url","fetch","then","resp","json","response","info","next","split","results","search","toLowerCase","includes","fetchCharactersFromAPI","filter","isSubstringCaseInsensitive","paginationProps","characterElements","map","CharacterJumbotron","Jumbotron","status","species","gender","origin","location","Character","match","params","fetchCharacterFromAPI","App","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c7db87f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1d645dd0.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport logo from '../../assets/logo.png';\r\n\r\nclass AppNavbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" className=\"mb-4\">\r\n        <Navbar.Brand as={Link} to=\"/\">\r\n          <img \r\n            src={logo} \r\n            alt=\"Rick &amp; Morty\"\r\n            height=\"30\"\r\n          />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"ml-auto\">\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            <Nav.Link href=\"https://github.com/robopro/react-rick-morty\">About</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppNavbar;","import React from 'react';\r\n\r\nclass ErrorMessage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>Error: { this.props.error.message }</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorMessage;","import React from 'react';\r\n\r\nclass LoadingSpinner extends React.Component {\r\n  render() {\r\n    return (\r\n      // I know, I know. It's not a spinner. Shush you.\r\n      <div>Loading . . .</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;","import React from 'react';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass SearchForm extends React.Component {\r\n  state = {\r\n    searchQuery: ''\r\n  };\r\n\r\n  onSearchChanged(event) {\r\n    this.setState({\r\n      searchQuery: event.target.value\r\n    }, () => {\r\n      this.props.searchChanged(this.state.searchQuery);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex flex-wrap\">\r\n        <FormControl \r\n          type=\"text\" \r\n          placeholder=\"Search\" \r\n          className=\"col-sm-12 col-md-9\" \r\n          value={this.state.searchQuery} \r\n          onChange={ (event) => this.onSearchChanged(event) }\r\n        />\r\n        <Button \r\n          variant=\"info\"\r\n          className=\"col-sm-12 col-md-3\" \r\n          value=\"\" \r\n          onClick={ (event) => this.onSearchChanged(event) }\r\n        >\r\n          Clear\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from 'react-bootstrap/Card';\r\nimport './CharacterCard.css';\r\n\r\nclass CharacterCard extends React.Component {\r\n  render() {\r\n    const character = this.props.character;\r\n\r\n    return (\r\n      <Card className=\"character-card m-2\">\r\n        <Card.Img src={character.image} />\r\n        <Card.ImgOverlay>\r\n          <Card.Link as={Link} \r\n            to={{\r\n              pathname: '/character/' + character.id,\r\n              // Yes, you _can_ do this. Love it.\r\n              state: {character: character}\r\n            }}\r\n            className=\"card-overlay d-flex justify-content-center align-items-center\"\r\n          >\r\n            <Card.Title className=\"card-text font-weight-bold text-dark\">\r\n              {character.name}\r\n            </Card.Title>\r\n          </Card.Link>\r\n        </Card.ImgOverlay>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterCard;","import React from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport './CharacterListPagination.css';\r\n\r\n// This is a hell of a lot of work for a simple pagination bar.\r\n// Lemme know if you know how this can be refactored ;P\r\nclass CharacterListPagination extends React.Component {\r\n  state = {\r\n    firstProps: {\r\n      active: false,\r\n      disabled: false\r\n    },\r\n    lastProps: {\r\n      active: false,\r\n      disabled: false\r\n    },\r\n    ellipsisFirstDisplay: '',\r\n    ellipsisLastDisplay: 'd-none',\r\n    nextPage: 2,\r\n    prevPage: 1,\r\n    currentElements: []\r\n  };\r\n\r\n  onPaginationClick(page) {\r\n    this.props.paginationClicked(page);\r\n  }\r\n\r\n  /** Props needed to enable/disable the first three and last three pagination buttons */\r\n  setElementProps() {\r\n    const currentPage = this.props.currentPage;\r\n    let firstProps = this.state.firstProps;\r\n    let lastProps = this.state.lastProps;\r\n    \r\n    if (currentPage === 1) {\r\n      firstProps.active = true;\r\n      firstProps.disabled = true;\r\n    } else if (currentPage === this.props.pages) {\r\n      lastProps.active = true;\r\n      lastProps.disabled = true;\r\n    }\r\n    \r\n    return { first: firstProps, last: lastProps };\r\n  }\r\n  \r\n  /** Creates the necessary pagination elements between the ellipses */\r\n  setCurrentElements() {\r\n    const currentPage = this.props.currentPage;\r\n    const pages = this.props.pages;\r\n    const elements = [];\r\n    \r\n    if (currentPage > 2) {\r\n      const prevPage = currentPage - 1;\r\n      elements.push(<Pagination.Item key={elements.length + 1} onClick={ () => this.onPaginationClick(prevPage) }>{ prevPage }</Pagination.Item>);\r\n    }\r\n    if (currentPage > 1 && currentPage < pages) {\r\n      elements.push(<Pagination.Item key={elements.length + 1} active disabled>{ currentPage }</Pagination.Item>);\r\n    }\r\n    if (currentPage < pages - 1) {\r\n      const nextPage = currentPage + 1;\r\n      elements.push(<Pagination.Item key={elements.length + 1} onClick={ () => this.onPaginationClick(nextPage) } >{ nextPage }</Pagination.Item>);\r\n    }\r\n    return elements;\r\n  }\r\n\r\n  /** Updates state */\r\n  componentDidMount() {\r\n    const currentPage = this.props.currentPage;\r\n    const elementProps = this.setElementProps();\r\n    const currentElements = this.setCurrentElements();\r\n\r\n    this.setState({\r\n      firstProps: elementProps.first,\r\n      lastProps: elementProps.last,\r\n      ellipsisFirstDisplay: currentPage > 3 ? '' : 'd-none',\r\n      ellipsisLastDisplay: currentPage < this.props.pages -  2 ? '' : 'd-none',\r\n      nextPage: currentPage + 1,\r\n      prevPage: currentPage - 1,\r\n      currentElements: currentElements\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { pages } = this.props;\r\n    const { firstProps, lastProps, ellipsisFirstDisplay, ellipsisLastDisplay, nextPage, prevPage, currentElements } = this.state\r\n\r\n    return (\r\n      <Pagination>\r\n        <Pagination.First {...firstProps} onClick={ () => this.onPaginationClick(1) } />\r\n        <Pagination.Prev  {...firstProps} onClick={ () => this.onPaginationClick(prevPage) } />\r\n        <Pagination.Item {...firstProps} onClick={ () => this.onPaginationClick(1) } >{1}</Pagination.Item>\r\n        <Pagination.Ellipsis disabled className={ellipsisFirstDisplay} />\r\n        { currentElements }\r\n        <Pagination.Ellipsis disabled className={ellipsisLastDisplay} />\r\n        <Pagination.Item {...lastProps} onClick={ () => this.onPaginationClick(pages) }>{pages}</Pagination.Item>\r\n        <Pagination.Next {...lastProps} onClick={ () => this.onPaginationClick(nextPage) } />\r\n        <Pagination.Last {...lastProps} onClick={ () => this.onPaginationClick(pages) }/>\r\n      </Pagination>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterListPagination;","import React from 'react';\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\r\nimport SearchForm from '../../components/SearchForm/SearchForm';\r\nimport CharacterCard from '../../components/CharacterCard/CharacterCard';\r\nimport CharacterListPagination from '../../components/CharacterListPagination/CharacterListPagination';\r\n\r\nconst API_URL = 'https://rickandmortyapi.com/api/character/?page=';\r\n\r\nclass CharacterList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      pages: 1,\r\n      currentPage: 1,\r\n      characters: [],\r\n      filteredCharacters: [],\r\n      isLoaded: false,\r\n      error: null\r\n    };\r\n    this.handleSearchChanged = this.handleSearchChanged.bind(this);\r\n    this.handlePaginationClicked = this.handlePaginationClicked.bind(this);\r\n  }\r\n  \r\n  async fetchCharactersFromAPI(page = 1) {\r\n    try {\r\n      const url = API_URL + page;\r\n      const response = await fetch(url).then(resp => resp.json())\r\n      const pages = response.info.pages;\r\n      const currentPage = response.info.next.split('=')[1] - 1 || pages;\r\n\r\n      this.setState({\r\n        pages: pages,\r\n        currentPage: currentPage,\r\n        characters: response.results,\r\n        filteredCharacters: response.results,\r\n        isLoaded: true\r\n      });\r\n    } catch (e) {\r\n      this.setState({\r\n        isLoaded: true,\r\n        error: e\r\n      });\r\n    }\r\n  }\r\n  \r\n  isSubstringCaseInsensitive(name, search) {\r\n    return name.toLowerCase().includes(search.toLowerCase())\r\n  }\r\n\r\n  handlePaginationClicked(page) {\r\n    this.setState({\r\n      isLoaded: false\r\n    }, () => this.fetchCharactersFromAPI(page));\r\n  }\r\n\r\n  handleSearchChanged(search) {\r\n    const filteredCharacters = this.state.characters.filter(character => this.isSubstringCaseInsensitive(character.name, search));\r\n    this.setState({\r\n      filteredCharacters: filteredCharacters\r\n    });\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.fetchCharactersFromAPI();  \r\n  }\r\n\r\n  render() {\r\n    const { pages, currentPage, filteredCharacters, isLoaded, error } = this.state;\r\n\r\n    if (error) {\r\n      return <ErrorMessage error={ error }></ErrorMessage>\r\n    } else if (!isLoaded) {\r\n      return <LoadingSpinner></LoadingSpinner>\r\n    }\r\n      \r\n    const paginationProps = {\r\n      pages: pages,\r\n      currentPage: currentPage,\r\n      paginationClicked: this.handlePaginationClicked\r\n    };\r\n    \r\n    const characterElements = filteredCharacters.map(character => {\r\n      return <CharacterCard character={ character } key={character.id}></CharacterCard>\r\n    });\r\n\r\n    return (\r\n      <div className=\"col-sm-12 col-lg-8 d-flex flex-column align-items-center\">\r\n        <CharacterListPagination { ...paginationProps }></CharacterListPagination>\r\n        <SearchForm searchChanged={ this.handleSearchChanged }></SearchForm>\r\n        <div className=\"w-100 d-flex flex-wrap justify-content-center justify-content-lg-start\">\r\n          { characterElements }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './CharacterJumbotron.css';\r\n\r\nclass CharacterJumbotron extends React.Component {\r\n  render() {\r\n    const character = this.props.character;\r\n\r\n    return(\r\n      <Jumbotron className=\"w-100 d-flex flex-wrap justify-content-around position-relative\">\r\n        <Button as={ Link } to='/' variant=\"info\" className=\"back-button\">Back</Button>\r\n        <div className=\"position-relative mx-3 rounded-circle overflow-hidden\">\r\n          <img src={character.image} alt={character.name} />\r\n          <p className={\"character-image-status lead font-weight-bold \" }>{ character.status }</p>\r\n        </div>\r\n        <div>\r\n          <h1 className=\"display-4\">{ character.name }</h1>\r\n          <p className=\"lead border-bottom border-dark\">{`${character.species} - ${character.gender}`}</p>\r\n          <div className=\"\">\r\n            <p className=\"font-weight-bold mb-0\">Origin:</p>\r\n            <p>{character.origin.name}</p>\r\n          </div>\r\n          <div className=\"border-top\">\r\n            <p className=\"font-weight-bold mb-0\">Last Known Location:</p>\r\n            <p>{character.location.name}</p>\r\n          </div>\r\n        </div>\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterJumbotron;","import React from 'react';\r\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\r\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\r\nimport CharacterJumbotron from \"../../components/CharacterJumbotron/CharacterJumbotron\";\r\n\r\nconst API_URL = 'https://rickandmortyapi.com/api/character/';\r\n\r\nclass Character extends React.Component {\r\n  state = {\r\n    id: this.props.match.params.id,\r\n    character: null,\r\n    isLoaded: false,\r\n    error: null\r\n  };\r\n\r\n  async fetchCharacterFromAPI() {\r\n    try {\r\n      const response = await fetch(API_URL + this.state.id).then(resp => resp.json());\r\n      this.setState({\r\n        character: response,\r\n        isLoaded: true\r\n      });\r\n    } catch (e) {\r\n      this.setState({\r\n        isLoaded: true,\r\n        error: e\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // This ain't perfect, but it's done to test passing objects through router.\r\n    // Not what it's for, but you _can_!\r\n    if (this.props.location.state) {\r\n      this.setState({\r\n        character: this.props.location.state.character,\r\n        isLoaded: true\r\n      });\r\n    } \r\n    if (!this.state.character) {\r\n      this.fetchCharacterFromAPI();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { character, isLoaded, error } = this.state;\r\n    \r\n    if (error) {\r\n      return <ErrorMessage error={ error }></ErrorMessage>\r\n    } else if (!isLoaded) {\r\n      return <LoadingSpinner></LoadingSpinner>\r\n    }\r\n    \r\n    return (\r\n      <div className=\"col-sm-12 col-xl-8 d-flex justify-content-center\">\r\n        <CharacterJumbotron character={ character }></CharacterJumbotron>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Character;","import React from 'react';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar/AppNavbar';\nimport CharacterList from './views/CharacterList/CharacterList';\nimport Character from './views/Character/Character';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <AppNavbar></AppNavbar>\n      <div className=\"d-flex justify-content-center\">\n        <Switch>\n          <Route path=\"/character/:id\" component={ Character } />\n          <Route path=\"/\" component={ CharacterList } />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}